{"version":3,"sources":["../../src/util/JsonUtil.js"],"names":["ArrayWriter","stream","_stream","_cnt","write","arr","forEach","pre","JSON","stringify","data","Promise","resolve","end","JsonUtil","path","fs","existsSync","Error","_existPath","parse","readFileSync","e","is","createReadStream","writables","JSONStream","reduce","w","pipe"],"mappings":";;;;;;;;AAAA;;;;AACA;;;;AACA;;;;;;;;IAEMA,W;AACJ,uBAAYC,MAAZ,EAAoB;AAAA;;AAClB,SAAKC,OAAL,GAAeD,MAAf;AACA,SAAKE,IAAL,GAAY,CAAZ;AACA,SAAKD,OAAL,CAAaE,KAAb,CAAmB,GAAnB;AACD;;;;0BAEKC,G,EAAK;AAAA;;AACTA,UAAIC,OAAJ,CAAY,gBAAQ;AAClB,YAAMC,MAAM,MAAKJ,IAAL,KAAc,GAAd,GAAoB,EAAhC;AACA,cAAKD,OAAL,CAAaE,KAAb,CAAmBG,MAAMC,KAAKC,SAAL,CAAeC,IAAf,CAAN,GAA6B,IAAhD;AACD,OAHD;AAID;;;;;;;;;;;iDAGQ,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAa;AAC9B,yBAAKV,OAAL,CAAaE,KAAb,CAAmB,GAAnB;AACA,yBAAKF,OAAL,CAAaW,GAAb,CAAiB;AAAA,2BAAMD,SAAN;AAAA,mBAAjB;AACD,iBAHM,C;;;;;;;;;;;;;;;;;;;;;IASUE,Q;;;;;;;+BAEDC,I,EAAM;AACtB,UAAI,CAACC,aAAGC,UAAH,CAAcF,IAAd,CAAL,EAA0B;AACxB,cAAM,IAAIG,KAAJ,+BAAkBH,IAAlB,+HAAN;AACD;AACF;;;6BAEeA,I,EAAM;AACpB,WAAKI,UAAL,CAAgBJ,IAAhB;AACA,UAAI;AACF,eAAOP,KAAKY,KAAL,CAAWJ,aAAGK,YAAH,CAAgBN,IAAhB,EAAsB,OAAtB,CAAX,CAAP;AACD,OAFD,CAEE,OAAOO,CAAP,EAAU;AACV,cAAM,IAAIJ,KAAJ,+BAAkBH,IAAlB,wFAA6CO,CAA7C,CAAN;AACD;AACF;;;2CAE6BP,I,EAAoB;AAChD,WAAKI,UAAL,CAAgBJ,IAAhB;AACA,UAAMQ,KAAKP,aAAGQ,gBAAH,CAAoBT,IAApB,EAA0B,OAA1B,CAAX;;AAFgD,wCAAXU,SAAW;AAAXA,iBAAW;AAAA;;AAGhD,aAAO,CAACC,qBAAWN,KAAX,CAAiB,GAAjB,CAAD,SAA2BK,SAA3B,EAAsCE,MAAtC,CAA6C,UAACJ,EAAD,EAAKK,CAAL;AAAA,eAAWL,GAAGM,IAAH,CAAQD,CAAR,CAAX;AAAA,OAA7C,EAAoEL,EAApE,CAAP;AACD;;;4CAE8BtB,M,EAAQ;AACrC,aAAO,IAAID,WAAJ,CAAgBC,MAAhB,CAAP;AACD;;;;;;kBAzBkBa,Q","file":"JsonUtil.js","sourcesContent":["import fs from 'fs';\nimport JSONStream from 'JSONStream';\nimport { resolve } from 'path';\n\nclass ArrayWriter {\n  constructor(stream) {\n    this._stream = stream;\n    this._cnt = 0;\n    this._stream.write('[');\n  }\n\n  write(arr) {\n    arr.forEach(data => {\n      const pre = this._cnt++ ? ',' : '';\n      this._stream.write(pre + JSON.stringify(data) + '\\n');\n    });\n  }\n\n  async end() {\n    return new Promise((resolve) => {\n      this._stream.write(']');\n      this._stream.end(() => resolve());\n    });\n  }\n\n}\n\n\nexport default class JsonUtil {\n\n  static _existPath(path) {\n    if (!fs.existsSync(path)) {\n      throw new Error(`ファイル ${path} が存在しません。パスを確認してください。`);\n    }\n  }\n\n  static loadJson(path) {\n    this._existPath(path);\n    try {\n      return JSON.parse(fs.readFileSync(path, 'utf-8'));\n    } catch (e) {\n      throw new Error(`ファイル ${path} の JSON 読み込みに失敗しました ${e}`);\n    }\n  }\n\n  static toJSONArrayInputStream(path, ...writables) {\n    this._existPath(path);\n    const is = fs.createReadStream(path, 'utf-8');\n    return [JSONStream.parse('*'), ...writables].reduce((is, w) => is.pipe(w), is);\n  }\n\n  static createObjectArrayWriter(stream) {\n    return new ArrayWriter(stream);\n  }\n}\n"]}